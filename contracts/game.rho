contract @"CarBrawl"(@{
  "host": host,     // string
  "cost": cost,     // int
}) = {
  new debug(`rho:io:stdout`), ticketRegistryCh in {
    ticketRegistryCh!(Set()) |
    // 购买入场券
    contract @"BuyTicket"(@deployer, @player, return) = {
      for(@tickets <- ticketRegistryCh) {
        match tickets.contains(player) {
          true => {
            return!((true, player ++ " has already bought a ticket.")) |
            ticketRegistryCh!(tickets)
          }
          false => {
            new transferRes in {
              @"Transfer"!(deployer, host, player, cost, *transferRes) |
              for (@(success, msg) <- transferRes) {
                if (success) {
                  ticketRegistryCh!(tickets.add(player)) |
                  return!((true, player ++ " buys a ticket."))
                } else {
                  ticketRegistryCh!(tickets) |
                  debug!((false, msg))
                }
              }
            }
          }
        }
      }
    }
    | // 创建游戏
    contract @"CreateGame"(@gameId) = {
      new gameResultCh, playersCh, rewardPool in {
        debug!("Game " ++ gameId ++ " is created")
        |
        playersCh!(Set()) |  // Set("p1_addr", "p2_addr", ...)
        rewardPool!(0) |
        gameResultCh!()  // [["playerA", 123], ["playerB", 234], ...]
        | // 加入游戏
        contract @[gameId, "joinGame"](@[player, ...rest], return) = {
            if (rest.length() > 0) @[gameId, "joinGame"]!(rest, *return) |
            for (@prev <- playersCh) {
              match prev.contains(player) {
                false => {
                  for (@prev <- rewardPool) {
                    rewardPool!(prev + cost)
                  } |
                  playersCh!(prev.add(player)) |
                  debug!(player ++ " join the game " ++ gameId ++ ".") |
                  return!(player ++ " join the game " ++ gameId ++ ".")
                  }
                true => playersCh!(prev)
              }
            }
        }
        | // 结束游戏
        contract @[gameId, "endGame"](@pointsMap, return) = {
          new iterate, resultsCh in {
            resultsCh!([]) |
            iterate!(pointsMap) |
            for (@{player: points, ...rest} <= iterate) {
              if (rest.size() > 0) iterate!(rest) |
              for (@players <- playersCh; @tickets <- ticketRegistryCh) {
                playersCh!(players) |
                ticketRegistryCh!(tickets.delete(player)) |
                if (players.contains(player)) {
                  for (@prev <- resultsCh) {
                    debug!("${player} win points ${points}" %% {"player": player, "points": points} ) |
                    return!("${player} win points ${points}" %% {"player": player, "points": points} ) |
                    if (prev.length() == players.size() - 1) {
                      gameResultCh!(prev ++ [[player, points]])
                    } else {
                      resultsCh!(prev ++ [[player, points]])
                    }
                  }
                }
              }
            }
          }
        }
        | // 奖励分配
        contract @[gameId, "reward"](@deployer, return) = {
          for (@res <- gameResultCh; @R <- rewardPool) {
            debug!(("gameResultCh", res)) |
            debug!(("rewardPool", R)) |
            new sortedResCh, compareFunc in {
              @"mergeSort"!(res, *compareFunc, *sortedResCh) |
              contract compareFunc(@a, @b, return) = {
                return!(a.nth(1) < b.nth(1))
              } |
              new rankCh in {
                rankCh!(res.length()) |
                for (@[[player, _], ...rest] <= sortedResCh; @rank <= rankCh) {
                  if (rest.length() > 0) sortedResCh!(rest) |
                  if (rank > 0) rankCh!(rank - 1) |
                  new rewardCh, computeReward, transferResCh in {
                    computeReward!(R, rank, res.length(), *rewardCh) |
                    for (@reward <- rewardCh) {
                      @"Transfer"!(deployer, host, player, reward, *transferResCh) |
                      for (@(success, msg) <- transferResCh) {
                        if (success) {
                          return!((player, reward))
                        } else {
                          debug!(("Reward Transfer failed:", msg))
                        }
                      }
                    } |
                    contract computeReward(@R, @rk, @n, return) = {
                      // debug!("total: ${R}, rank: ${rk}, number: ${n}" %% { "R": R, "rk": rk, "n": n}) |
                      return!(R * (20 + 6 * (n - rk)) / (20 * n + 3 * n * n - 3 * n))
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}