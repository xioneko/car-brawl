 contract @"mergeSort"(@list, compare, return) = {
  if (list.length() <= 1){
    return!(list)
  }
  else if (list.length() == 2) {
    new res in {
      compare!(list.nth(0), list.nth(1), *res) |
      for (@smaller <- res) {
        if (not smaller) {
            return!([list.nth(1), list.nth(0)])
        } else {
            return!(list)
        }
      }
    }
  }
  else {
    new l1, l2 in {
      @"mergeSort"!(list.slice(0, list.length() / 2), *compare, *l1) |
      @"mergeSort"!(list.slice(list.length() / 2, list.length()), *compare, *l2) |
      for (@sortedL1 <- l1; @sortedL2 <- l2) {
        new pc1, pc2, pc, lCh in {
          pc1!(0) | pc2!(0) | pc!(0) | lCh!([]) |
          for (@p1 <= pc1; @p2 <= pc2; @p <= pc; @l <= lCh ) {
            if (p == sortedL1.length() + sortedL2.length()) {
              return!(l)
            }
            else if (p1 < sortedL1.length() and p2 < sortedL2.length()) {
              new res in {
                compare!(sortedL1.nth(p1), sortedL2.nth(p2), *res) |
                for (@smaller <- res) {
                  if (smaller) {
                      lCh!(l ++ [sortedL1.nth(p1)]) |
                      pc1!(p1+1) | pc2!(p2)
                  } else {
                      lCh!(l ++ [sortedL2.nth(p2)]) |
                      pc1!(p1) | pc2!(p2+1)
                  }
                }
              }
            } else if (p1 < sortedL1.length()) {
              lCh!(l ++ [sortedL1.nth(p1)]) |
              pc1!(p1+1) | pc2!(p2)
            }
            else {
              lCh!(l ++ [sortedL2.nth(p2)]) |
              pc1!(p1) | pc2!(p2+1)
            }
            |
            pc!(p+1)
          }
        }
      }
    }
  }
}